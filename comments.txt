Ambiente de teste em JS - Suites

Test runners -
Test runners são responsáveis por importar os arquivos de testes e executar os casos de teste. Eles
esperam que cada caso de teste devolva true ou false. Mocha / Karma

Bibliotecas de Assert -
Bibliotecas de assert verificam se o teste está cumprindo com o determinado fazendo a afirmação e
respondendo com true ou false para o runner. Chai/assert

Bibliotecas de suporte
Somente executar os arquivos de teste e fazer o assert nem sempre é o suficiente. Pode ser necessário
substituir dependências, subir servidores fake, alterar o DOM e etc. Para isso existem as bibliotecas
de suporte. As bibliotecas de suporte se separam em diversas responsabilidades, como por exemplo:
para fazer mocks e spys temos o SinonJS³³ e o TestDoubleJS³⁴ já para emular servidores existe o
supertest³⁵

------------------------------------------

Vamos instalar três módulos:
• Mocha: módulo que ira executar as suites de teste.
• Chai: módulo usado para fazer asserções.
• Supertest: módulo usado para emular e abstrair requisições http.

vamos inicial com os testes de integração

---------------------------------------------------------------------

server.js é o initial point da applicaçao nota, que separamos a responsabilidade de inicializar o express e os middlewares 
no arquivo app.js.

Como nos testes a aplicação será inicializada pelo supertest e não pelo express como é feito no server.js, 
esse separação torna isso fácil.

-----------------------------------------------------------------------

O node ainda não da suporte completo ao ES6 (Ecmascript6) entao usaremos o babel como transpile antes de começar, apos o 
npm init devemos instalar o babel npm install --save-dev babel-cli bebel-preset-node6 .

o ultimo passo é criar o arquivo .babelrc apos esse pequenos passos , a aplicação tera suporte total ao ES6

